{"version":3,"sources":["webpack:///./src/app/map/map.module.ts","webpack:///./src/app/map/map.page.html","webpack:///./src/app/map/map.page.scss","webpack:///./src/app/map/map.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACA;AACE;AACV;AAgBrC;IAAA;IAA4B,CAAC;IAAhB,aAAa;QAdzB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC;oBACpB;wBACE,IAAI,EAAE,EAAE;wBACR,SAAS,EAAE,iDAAO;qBACnB;iBACF,CAAC;aACH;YACD,YAAY,EAAE,CAAC,iDAAO,CAAC;SACxB,CAAC;OACW,aAAa,CAAG;IAAD,oBAAC;CAAA;AAAH;;;;;;;;;;;;ACrB1B,sQAAsQ,aAAa,Y;;;;;;;;;;;ACAnR,+DAA+D,+H;;;;;;;;;;;;;;;;;ACAb;AAWlD;IAeE;QAbQ,UAAK,GAAG;YACd,OAAO;YACP,MAAM;YACN,MAAM;YACN,UAAU;YACV,YAAY;YACZ,aAAa;YACb,mBAAmB;YACnB,MAAM;YACN,WAAW;YACX,OAAO;SACR,CAAC;QACK,UAAK,GAAyD,EAAE,CAAC;QAexE,QAAG,GAAW,CAAC,CAAC;QAChB,QAAG,GAAW,CAAC,CAAC;QAdd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBACd,KAAK,EAAE,OAAO,GAAG,CAAC;gBAClB,IAAI,EAAE,gBAAgB,GAAG,CAAC;gBAC1B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAChE,CAAC,CAAC;SACJ;IACH,CAAC;IAED,0BAAQ,GAAR,cAAY,CAAC;IAOb,iCAAe,GAAf;QACE,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,yBAAO,GAAP;QACE,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE;YACrB,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM;YACjB,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACpC,kBAAkB,EAAE,GAAG;SACxB,CAAC,CAAC;QACH,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,EAAC,IAAI,CAAC,CAAC,CAAC;QAC1C,IAAI,KAAK,GAAG,CAAC,CAAC,YAAY,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,CAAC;YAClD,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACxB,CAAC;IAhDU,OAAO;QALnB,+DAAS,CAAC;YACT,QAAQ,EAAE,SAAS;YACnB,mFAA4B;;SAE7B,CAAC;;OACW,OAAO,CAiDnB;IAAD,cAAC;CAAA;AAjDmB","file":"map-map-module.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { IonicModule } from \"@ionic/angular\";\nimport { RouterModule } from \"@angular/router\";\nimport { MapPage } from \"./map.page\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild([\n      {\n        path: \"\",\n        component: MapPage\n      }\n    ])\n  ],\n  declarations: [MapPage]\n})\nexport class MapPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>\\n      Map\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<div id=\\\"map\\\" style=\\\"width:100%; height:100%;\\\"></div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21hcC9tYXAucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from \"@angular/core\";\n\nimport { Map, latLng, tileLayer, Layer, marker } from \"leaflet\";\n\ndeclare var L: any;\n\n@Component({\n  selector: \"app-map\",\n  templateUrl: \"map.page.html\",\n  styleUrls: [\"map.page.scss\"]\n})\nexport class MapPage implements OnInit {\n  private selectedItem: any;\n  private icons = [\n    \"flask\",\n    \"wifi\",\n    \"beer\",\n    \"football\",\n    \"basketball\",\n    \"paper-plane\",\n    \"american-football\",\n    \"boat\",\n    \"bluetooth\",\n    \"build\"\n  ];\n  public items: Array<{ title: string; note: string; icon: string }> = [];\n  constructor() {\n    for (let i = 1; i < 11; i++) {\n      this.items.push({\n        title: \"Item \" + i,\n        note: \"This is item #\" + i,\n        icon: this.icons[Math.floor(Math.random() * this.icons.length)]\n      });\n    }\n  }\n\n  ngOnInit() {}\n\n  //Lifecycle hooks\n  map: Map;\n  lat: number = 5;\n  lng: number = 5;\n\n  ionViewDidEnter() {\n    this.loadMap();\n  }\n\n  loadMap() {\n    var map = L.map('map', {\n      crs: L.CRS.Simple,\n      maxBounds: [[-10,-25], [1050, 1050]],\n      maxBoundsViscosity: 1.0,\n    });\n    var bounds = [[-26.5,-25], [1021.5,1023]];\n    var image = L.imageOverlay('assets/floorplan.svg', bounds).addTo(map);\n    L.marker([120,30]).addTo(map).on('click', function(e) {\n      alert(this.getLatLng());\n    });\n    map.fitBounds(bounds);\n  }\n}\n"],"sourceRoot":""}